// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "dqchart.h"

/////////////////////////////////////////////////////////////////////////////
// CDQChart

IMPLEMENT_DYNCREATE(CDQChart, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CDQChart properties

long CDQChart::GetYmin()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CDQChart::SetYmin(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CDQChart::GetYmax()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CDQChart::SetYmax(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

short CDQChart::GetChannel()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CDQChart::SetChannel(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

short CDQChart::GetStep()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CDQChart::SetStep(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

BOOL CDQChart::GetLock()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CDQChart::SetLock(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

long CDQChart::GetXmax()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CDQChart::SetXmax(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

BOOL CDQChart::GetMarkWdqEvent()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CDQChart::SetMarkWdqEvent(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

long CDQChart::GetDigitalMask()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CDQChart::SetDigitalMask(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDQChart operations

void CDQChart::Chart(const VARIANT& Data)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Data);
}

void CDQChart::ChartEx(short* Buffer, short Channel, short Total)
{
	static BYTE parms[] =
		VTS_PI2 VTS_I2 VTS_I2;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Buffer, Channel, Total);
}

void CDQChart::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
