// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "dataqsdk.h"

/////////////////////////////////////////////////////////////////////////////
// CDataqSdk

IMPLEMENT_DYNCREATE(CDataqSdk, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CDataqSdk properties

CString CDataqSdk::GetDeviceDriver()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CDataqSdk::SetDeviceDriver(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CDataqSdk::GetDeviceID()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CDataqSdk::SetDeviceID(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

short CDataqSdk::GetADChannelCount()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CDataqSdk::SetADChannelCount(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

double CDataqSdk::GetSampleRate()
{
	double result;
	GetProperty(0x4, VT_R8, (void*)&result);
	return result;
}

void CDataqSdk::SetSampleRate(double propVal)
{
	SetProperty(0x4, VT_R8, propVal);
}

double CDataqSdk::GetMaxBurstRate()
{
	double result;
	GetProperty(0x5, VT_R8, (void*)&result);
	return result;
}

void CDataqSdk::SetMaxBurstRate(double propVal)
{
	SetProperty(0x5, VT_R8, propVal);
}

long CDataqSdk::GetEventPoint()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CDataqSdk::SetEventPoint(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CDataqSdk::GetBurstCounter()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CDataqSdk::SetBurstCounter(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CDataqSdk::GetTrigMode()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CDataqSdk::SetTrigMode(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

short CDataqSdk::GetTrigLevel()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CDataqSdk::SetTrigLevel(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

long CDataqSdk::GetTrigSlope()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CDataqSdk::SetTrigSlope(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

short CDataqSdk::GetTrigScnChnIdx()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CDataqSdk::SetTrigScnChnIdx(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CDataqSdk::GetTrigPreLength()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CDataqSdk::SetTrigPreLength(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

short CDataqSdk::GetTrigPostLength()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CDataqSdk::SetTrigPostLength(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

long CDataqSdk::GetTrigHysteresisIdx()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CDataqSdk::SetTrigHysteresisIdx(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

short CDataqSdk::GetDigitalOutput()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CDataqSdk::SetDigitalOutput(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

long CDataqSdk::GetAvailableData()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CDataqSdk::SetAvailableData(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

short CDataqSdk::GetDigitalInput()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CDataqSdk::SetDigitalInput(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CDataqSdk::GetInfoBoardID()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CDataqSdk::SetInfoBoardID(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

CString CDataqSdk::GetInfoSerial()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CDataqSdk::SetInfoSerial(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

BOOL CDataqSdk::GetInfoPGL()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CDataqSdk::SetInfoPGL(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

long CDataqSdk::GetLastErrorCode()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CDataqSdk::SetLastErrorCode(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

short CDataqSdk::GetInfoRev()
{
	short result;
	GetProperty(0x16, VT_I2, (void*)&result);
	return result;
}

void CDataqSdk::SetInfoRev(short propVal)
{
	SetProperty(0x16, VT_I2, propVal);
}

long CDataqSdk::GetADCounter()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CDataqSdk::SetADCounter(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDataqSdk operations

VARIANT CDataqSdk::GetData()
{
	VARIANT result;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CDataqSdk::ADChannelList(const VARIANT& Channel)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Channel);
}

void CDataqSdk::ADCounterList(const VARIANT& Counter)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Counter);
}

void CDataqSdk::ADDiffList(const VARIANT& Diff)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Diff);
}

void CDataqSdk::ADGainList(const VARIANT& Gain)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Gain);
}

void CDataqSdk::ADMethodList(const VARIANT& Method)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Method);
}

short CDataqSdk::GetDataEx(short* Buffer, short Count)
{
	short result;
	static BYTE parms[] =
		VTS_PI2 VTS_I2;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		Buffer, Count);
	return result;
}

void CDataqSdk::DAOutput(short Data, short Port)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Data, Port);
}

void CDataqSdk::Start()
{
	InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CDataqSdk::Stop()
{
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CDataqSdk::GetDataFrameEx(short* Buffer, short Count)
{
	short result;
	static BYTE parms[] =
		VTS_PI2 VTS_I2;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		Buffer, Count);
	return result;
}

VARIANT CDataqSdk::GetDataFrame(short Count)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Count);
	return result;
}

void CDataqSdk::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
